rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin(organizationId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.organizationId == organizationId &&
        get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.systemInfo.role == 'admin';
    }
    
    function belongsToOrganization(organizationId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.organizationId == organizationId;
    }
    
    function isManager(organizationId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/employees/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.organizationId == organizationId &&
        get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.systemInfo.role in ['admin', 'manager'];
    }
    
    // Organization rules
    match /organizations/{organizationId} {
      allow read, write: if isAdmin(organizationId);
    }
    
    // Department rules
    match /departments/{departmentId} {
      allow read: if belongsToOrganization(resource.data.organizationId);
      allow write: if isAdmin(resource.data.organizationId);
    }
    
    // Employee rules
    match /employees/{employeeId} {
      allow read: if belongsToOrganization(resource.data.organizationId);
      allow write: if isAdmin(resource.data.organizationId);
      allow update: if belongsToOrganization(resource.data.organizationId) && 
        employeeId == request.auth.uid; // Employees can update their own profile
    }
    
    // KPI Categories rules
    match /kpiCategories/{categoryId} {
      allow read: if belongsToOrganization(resource.data.organizationId);
      allow write: if isAdmin(resource.data.organizationId);
    }
    
    // KPI rules
    match /kpis/{kpiId} {
      allow read: if belongsToOrganization(resource.data.organizationId);
      allow write: if isAdmin(resource.data.organizationId);
    }
    
    // KPI Records rules
    match /kpiRecords/{recordId} {
      allow read: if belongsToOrganization(resource.data.organizationId) &&
        (resource.data.employeeId == request.auth.uid || isManager(resource.data.organizationId));
      allow write: if belongsToOrganization(resource.data.organizationId) &&
        (resource.data.employeeId == request.auth.uid || isManager(resource.data.organizationId));
      allow update: if belongsToOrganization(resource.data.organizationId) &&
        (resource.data.employeeId == request.auth.uid || isManager(resource.data.organizationId));
    }
    
    // Reward Programs rules
    match /rewardPrograms/{programId} {
      allow read: if belongsToOrganization(resource.data.organizationId);
      allow write: if isAdmin(resource.data.organizationId);
    }
    
    // Reward Calculations rules
    match /rewardCalculations/{calculationId} {
      allow read: if belongsToOrganization(resource.data.organizationId) &&
        (resource.data.employeeId == request.auth.uid || isManager(resource.data.organizationId));
      allow write: if isManager(resource.data.organizationId);
    }
    
    // Reports rules
    match /reports/{reportId} {
      allow read, write: if belongsToOrganization(resource.data.organizationId) &&
        (resource.data.employeeId == request.auth.uid || isManager(resource.data.organizationId));
    }
    
    // Notifications rules
    match /notifications/{notificationId} {
      allow read, write: if belongsToOrganization(resource.data.organizationId) &&
        resource.data.userId == request.auth.uid;
    }
    
    // Legacy collections - maintain backward compatibility
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allow read access to legacy collections for migration
    match /{document=**} {
      allow read, write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/employees/$(request.auth.uid));
    }
  }
}